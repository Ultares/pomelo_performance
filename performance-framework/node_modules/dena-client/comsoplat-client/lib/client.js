var request = require('request');
var util = require('util');
var httpreq = require('http').request
var querystring = require('querystring');

var Client = function () {
    this.fn = null;
    this.actions = [];
    this.caseData = {
        'wid': 1,
        'previous': false,
        version: 1046,
        platform_id: 1983001230,
        ratemode: 0,
        debug: 1,
        loopCount: 1
    };
    this.options = {};
    this.fns = [];
    this.breathIntervalTime = 200;
    this.sendInterval = 3;
    this.responseOverTime = 30000
};

module.exports = Client;

Client.prototype.run = function () {

    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {

        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                self.log('debug', 'Clear timer' + self.fns.length)
                clearInterval(timer);
            }
        }
    }
};

Client.prototype.randomIntTime = function (low, high) {
    var sendInterval = this.sendInterval || 10;
    var low = low || sendInterval * 800;
    var high = high || sendInterval * 1200;
    return Math.floor(Math.random() * (high - low + 1) + low);
    // return 1000;
}

Client.prototype.init = function (params, cb) {
    this.port = params.port;
    this.host = params.host;
    setImmediate(cb);
}

Client.prototype.getCurrentTime = function () {
    var self = this;

    var cTime = new Date().toLocaleString().split(' ').slice(0, 5).join(' ');
    return self.stylize(cTime, 'green');
}

Client.prototype.stylize = function (str, style) {
    var styles = {
        'bold': [1, 22],
        'italic': [3, 23],
        'underline': [4, 24],
        'cyan': [96, 39],
        'blue': [34, 39],
        'yellow': [33, 39],
        'green': [32, 39],
        'red': [31, 39],
        'grey': [90, 39],
        'green-hi': [92, 32],
    };
    return '\033[' + styles[style][0] + 'm' + str +
        '\033[' + styles[style][1] + 'm';
};

Client.prototype.log = function (level, msg) {
    var self = this;
    if (self.caseData.debug && level.toLowerCase() !== 'error') {
        console.log('[%s] %s : %s', self.getCurrentTime(), self.stylize(level.toUpperCase(), 'green'), msg);
    } else {
        if (level.toLowerCase() == 'error') {
            console.log('[%s] %s : %s', self.getCurrentTime(), self.stylize('ERROR', 'red'), self.stylize(msg, 'red'));
        }
    }
}

Client.prototype.httpRequest = function (path, body, cb) {
    var self = this;
    var headers = {
        'Content-Type': 'text/html'
    }

    if (!!body) {
        self.reqstr = querystring.unescape(querystring.stringify(body));
        self.log('debug', self.reqstr);
        self.reqstr = querystring.escape(self.reqstr);
        path += self.reqstr;

    }

    var options = {
        hostname: self.host,
        port: self.port,
        method: 'GET',
        path: '/' + path,
        agent: false,
        headers: headers
    };

    var req = httpreq(options, function (res) {
        res.setEncoding('utf8');
        var iMsg = '';
        res.on('data', function (chunk) {
            iMsg += chunk;
        });
        res.on('end', function () {
            self.log('debug', JSON.stringify(res.statusCode));
            self.log('debug', iMsg);

            if (res.statusCode != 200) {
                self.log('error', 'Sending data: ' + options.hostname + ':' + options.port + options.path);
                self.log('error', iMsg);
            } else {
                self.log('debug', iMsg);
            }
            cb(res.statusCode, iMsg);
        });
    });
    req.setTimeout(self.responseOverTime, function () {
        self.log('error', 'Request time out!');
        self.log('error', 'Sending data ' + options.hostname + ':' + options.port + options.path)
        req.abort();
    });

    req.on('error', function (e) {
        self.log('error', e.toString());
        self.log('debug', 'Sending data ' + options.hostname + ':' + options.port + options.path);
        cb(e);
    });

    self.log('debug', 'Sending data ' + options.hostname + ':' + options.port + options.path);

    req.end();
};
