/**
 * Created by Administrator on 2015/5/11.
 */

var fs = require('fs');
var path = require('path');
var __ = require('underscore');
var ProtoBuf = require('protobufjs');

var Proto = {};
module.exports = Proto;

//var name = path.basename('role.proto', '.proto');
//var cmd = ProtoBuf.loadProtoFile(path.join(__dirname, 'proto', 'role.proto')).build('msg.role');
//
//for (var key in cmd) {
//    console.log(key)
//    var _load = {};
//
//    var message = cmd[key];
//    if (typeof message === 'function') {
//        _load.encode = __.bind(function (data) {
//            for (var attr in data)
//                this.set(attr, data[attr]);
//            return this.encode().toBuffer();
//        }, new message());
//        _load.decode = message.decode;
//        _load.decodeDelimited = message.decodeDelimited;
//        _load.decode64 = message.decode64;
//        _load.decodeHex = message.decodeHex;
//    } else {
//        _load = message;
//    }
//
//    if (!Proto[name])
//        Proto[name] = {};
//
//    Proto[name][key] = _load;
//}

fs.readdirSync(__dirname + '/proto').forEach(function (filename) {
    if (!/\.proto$/.test(filename)) {
        return;
    }

    var name = path.basename(filename, '.proto');
    // console.log(path.join(__dirname, 'proto', filename))
    var cmd = ProtoBuf.loadProtoFile(path.join(__dirname, 'proto', filename)).build('protocol');
    // console.log(cmd)
    for (var key in cmd) {
        var _load = {};
        try {
            var message = cmd[key];
            if (typeof message === 'function') {
                _load.encode = __.bind(function (data) {
                    for (var attr in data)
                        this.set(attr, data[attr]);
                    //console.log(arguments[0]);
                    return this.encode().toBuffer();
                }, new message());
                _load.decode = message.decode;
                _load.decodeDelimited = message.decodeDelimited;
                _load.decode64 = message.decode64;
                _load.decodeHex = message.decodeHex;
            } else {
                _load = message;
            }

            if (!Proto[name])
                Proto[name] = {};

            Proto[name][key] = _load;
        } catch (e) {
            console.log(e);
        }
    }
});


//var data = {
//    signDay: 2,
//    signFlag: 3,
//    item: []
//}
//
//console.log(Proto.basetype.EProtoId.ERROR_CODE_S)
//Proto.activity.DailySignRet.encode(data)


// console.log(Proto['MessageID']['C2S_MessageId'])
// console.log(Proto['MessageID']['S2C_MessageId'])
//console.log(Proto.role.MessageRole.eMessageRole_Login_C)