/**
 * Created by Administrator on 2015/4/24.
 */

/**
 * protocol for esport
 */

var ByteBuffer = require('dena-bytebuffer');

var Protocol = {}

Protocol.encode = function (EProtoId, EProtoBody) {
    var byteLength = EProtoBody === undefined ? 0 : EProtoBody.length;
    var byteBuffer = new ByteBuffer();
    byteBuffer.uint32(byteLength + 6);
    byteBuffer.ushort(EProtoId);
    if (byteLength) {
        byteBuffer.byteArray(EProtoBody, byteLength);
    }
    return byteBuffer.pack();
}

Protocol.decode = function (msg) {
    var package = {'EProtoLen': 0, 'EProtoId': 0, 'EProtoBody': null};
    var byteBuffer = new ByteBuffer(msg);
    if (msg.length === 4) {
        var unpackArray = byteBuffer.uint32().ushort().unpack();
        package.EProtoLen = unpackArray.shift();
        package.EProtoId = unpackArray.pop();
        package.EProtoBody = new Buffer(0);
    } else if (msg.length > 4) {
        var unpackArray = byteBuffer.uint32().ushort().byteArray(null, msg.length - 4).unpack();
        package.EProtoLen = unpackArray.shift();
        package.EProtoId = unpackArray.shift();
        package.EProtoBody = new Buffer(unpackArray.pop());
    } else {
        throw new Error('Unexpected msg Length!');
    }
    return package
}

var net = require('net');

var Esport = function () {
    this.socket = null;
    this.fn = null;
    this.dataChunks = [];
    this.actions = [];
    this.packageList = [];
    this.callbacks = {};
    this.customValue = {};
    this.caseData = {
        previous: false,
        debug: 0,
        ratemode: 0,
        loopCount: 100,
        gambles : {},
        gifts: {},
        responseOverTime : 3000
    };
    this.breathIntervalTime = 200;
    this.sendInterval = 1;
};

module.exports = Esport;

Esport.prototype.run = function () {
    var self = this;
    var timer = setInterval(breath, self.breathIntervalTime);

    function breath() {
        if (self.fn === null) {
            self.fn = self.actions.shift();
            return
        }
        // console.log('self.fn.toString(): ' + self.fn.toString())
        if (self.fn() === undefined) {
            if (self.actions.length) {
                self.fn = self.actions.shift();
            } else {
                self.log('clear timer')
                clearInterval(timer);
            }
        }
    }
};

Esport.prototype.randomIntTime = function (low, high) {
    var sendInterval = this.sendInterval || 10;
    var low = low || sendInterval * 800;
    var high = high || sendInterval * 1200;
    return Math.floor(Math.random() * (high - low + 1) + low);
    // return 1000;
}

Esport.prototype.connect = function (params, cb) {

    var port = params.port;
    var host = params.host;
    var self = this;
    if (self.caseData.debug) {
        self.log('Connecting to:' + host + ':' + port);
    }
    this.socket = net.connect(port, host);
    this.socket.on('connect', function () {
        cb();
    });

    this.socket.on('data', function (data) {
        self.dataChunks.push(data);
        processMessage(self);
        processPackage(self);
    });

    this.socket.on('error', function (error) {
        self.log(self.caseData.account + ' tcp-socket error code: ' + error.code, 'error');
    });

    this.socket.on('close', function (result) {
        if (self.caseData.debug) {
            self.log('tcp-socket closed!');
        }
    })
}

Esport.prototype.register = function (EProtoId, cb) {
    if (EProtoId === undefined || cb == undefined)
        return;
    this.callbacks[EProtoId] = cb;
}

Esport.prototype.unregister = function (EProtoId) {
    this.callbacks[EProtoId] = undefined;
}

Esport.prototype.request = function (EProtoId, EProtoBody) {
    var self = this;
    // self.log('EProtoId : ' + EProtoId );

    if (EProtoId === undefined)
        return;
    var args = Array.prototype.slice.apply(arguments);
    if (args.length == 4) {
        this.callbacks[args[2]] = args[3];
    }
    // var sg = ;
    self.log(' Sending : ' + EProtoId.toString(10))
    // self.log('EProtoBody : ' + EProtoBody );
    this.socket.write(Protocol.encode(EProtoId, EProtoBody));
};

Esport.prototype.log = function (msg, level) {
    var self = this;
    if (self.caseData.debug || level == "error") {
    var args = Array.prototype.slice.apply(arguments);
    var level = level || 'log';
        console[level]('[ %s ] - [ %s ] - %s', new Date().toLocaleTimeString(), level, msg);
    }
}

Esport.prototype.close = function () {
    if (this.socket) {
        this.socket.destroy();
        this.socket = null;
    }
};

var processMessage = function (self) {
    var buf = Buffer.concat(self.dataChunks);
    var len = buf.length;
    if (len >= 6) {
        var package = Protocol.decode(buf.slice(0, 6));
        if (len >= package.EProtoLen) {
            self.packageList.push(buf.slice(0, package.EProtoLen));
            self.dataChunks = [buf.slice(package.EProtoLen, len)];
            processMessage(self);
        }
    }
};

var processPackage = function (self) {

    while (self.packageList.length) {
        var msg = self.packageList.shift();
        var package = Protocol.decode(msg);
        var cb = self.callbacks[package.EProtoId];
        self.log('Received : ' + package.EProtoId.toString(10));
        if (cb) {
            cb(package.EProtoBody);
        }
    }
};
