package protocol;
import "Team.proto";
import "Error.proto";
import "Card.proto";
import "PlayerBasic.proto";
import "Item.proto";

enum EGloryWinCondition {
  GLORY_WIN_COND_INVALID = 0;
  GLORY_WIN_COND_KILL_OP_TOP = 1;             // 杀死对方TOP至少X次
  GLORY_WIN_COND_KILL_OP_JUG = 2;
  GLORY_WIN_COND_KILL_OP_MID = 3;
  GLORY_WIN_COND_KILL_OP_ADC = 4;
  GLORY_WIN_COND_KILL_OP_SUP = 5;
  GLORY_WIN_COND_TOP_DEATH = 6;               // 己方TOP最多死X次
  GLORY_WIN_COND_JUG_DEATH= 7;
  GLORY_WIN_COND_MID_DEATH= 8;
  GLORY_WIN_COND_ADC_DEATH= 9;
  GLORY_WIN_COND_SUP_DEATH= 10;
  GLORY_WIN_COND_KILL_MORE = 11;              // 我方击杀领先对方至少X次
  GLORY_WIN_COND_GROUP_WIN_ALL = 12;          // 团战全部胜利
  GLORY_WIN_COND_GANK_WIN = 13;               // Gank胜利X次以上
  GLORY_WIN_COND_DEATH = 14;                  // 我方总死亡次数最多X次
  GLORY_WIN_COND_KILL = 15;                   // 我方击杀数至少X次
}

// “光辉时刻”每一关的进度信息。
message GloryInstance {
  optional uint32 id = 1;                     // 第几关。
  optional uint32 count = 2;                  // 今天已经打了几次。
  optional uint32 high_star = 5;              // 之前获得过的最大星数。
  optional uint32 total_count = 6;            // 总次数
}

// 用于保存玩家在“光辉时刻”系统中的游戏进度等信息。
message GloryInfo {
  optional uint64 timestamp = 1;              // 服务器用,用于重置每天的次数。
  optional uint32 current_instance = 2;       // 服务器用,当前正在打哪个关卡。
  // optional bool current_is_win = 3;           // 服务器用,当前正在打的关卡有没有胜利。
  repeated GloryInstance instances = 4;       // 所有关卡的进度,没有打过的关卡不保存。
  optional Team team = 5;                     // “光辉时刻”系统专用阵容。
  repeated uint32 chapter_ids = 6;            // 预设条件达到的章节
  repeated uint32 opened_chapters = 7;        // 点开过第一关的章节
  optional uint32 finish_count = 8;           // 总共完成过几次
  optional uint32 daily_finish_count = 9;     // 今日完成次数
}

// 获取“光辉时刻”系统数据的请求。
message C2S_GloryInfoRequest {
}
// 获取“光辉时刻”系统数据的回复,或者章节解锁时主动推送。
message S2C_GloryInfoUpdate {
  optional GloryInfo glory_info = 1;
}

// 点开某章第一关
message C2S_GloryOpenChapterRequest {
  optional uint32 chapter_id = 1;
}
message S2C_GloryOpenChapterResponse {
  optional ErrorCode error_code = 1;
  optional uint32 chapter_id = 2;
}

// 进入关卡战斗或扫荡的请求。
message C2S_GloryGameRequest {
  optional uint32 instance_id = 1;            // 要挑战的关卡的ID。
  optional bool sweep = 2;                    // 值为true时表示扫荡,后面的字段不需要再设置。
  optional Team team = 3;                     // 选择的阵容。自己的选手填card_uid,租借的选手填card_id。
  repeated uint32 guest_cards = 4;            // 选择的阵容里租借选手的CardID。
  optional bool calculate_battle_force = 5;   // 传True的话返回的下一个协议只包含error_code和战力battle_force
}
// 进入关卡战斗的回复。
message S2C_GloryGameResponse {
  optional ErrorCode error_code = 1;          // 如果不为EC_Success,则说明出错、并且后面的字段也没有用了。
  repeated CardProp card_prop = 2;            // 用于战斗的阵容的属性。
  optional uint32 battle_force = 3;           // 用于战斗的阵容的战斗力。
  // optional bool is_win = 4;                         // true表示赢,false表示输 （改用Player.proto中的S2C_EnterBattle）
  // repeated uint32 condition_ids = 5;                // 根据双方的属性值算出来的、用于表现的局势ID （改用Player.proto中的S2C_EnterBattle）
}

// （改用Player.proto的C2S_LeaveBattle）
// 结束关卡战斗的请求。
// message C2S_GloryGameFinishRequest {
//   optional uint32 star = 1;                   // 获得的星数。
// }
// 结束关卡战斗的回复。
// message S2C_GloryGameFinishResponse {
//   optional ErrorCode error_code = 1;          // 如果不为EC_Success,则说明出错。
// }

// 更新关卡信息和队伍信息,在扫荡或战斗结束后发送。
message S2C_GloryInstanceUpdate {
  optional GloryInstance instance = 1;        // 更新的关卡信息。
  optional Team team = 2;                     // 更新的“光辉时刻”系统专用阵容（可能为空）。
  optional bool sweep = 4;                    // 值为true时表示扫荡。
  optional ErrorCode error_code = 6;          // 不为EC_Success时说明出错
  repeated Card old_cards = 7;                // 只包括card_id,level,exp字段
  repeated Card new_cards = 8;                // 只包括card_id,level,exp字段
  optional BasicInfo old_basic_info = 9;      // 只包括level,exp字段
  optional BasicInfo new_basic_info = 10;     // 只包括level,exp字段
  repeated Resource old_resource = 11;
  repeated Resource new_resource = 12;
  optional bool is_win = 13;
  optional uint32 star = 14;
  repeated Item items = 15;                   // 只设置item_id,count字段
  repeated uint32 win_conditions = 16;        // 达成了的胜利条件
  optional bool battle_win = 17;              // 战斗是否胜利
}

