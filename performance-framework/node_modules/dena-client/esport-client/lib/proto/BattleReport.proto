package protocol;
import "Battle.proto";
import "Common.proto";
import "Team.proto";
import "Error.proto";


//	CARD_ATTR_SPS = 1,			// 对线技巧
//	CARD_ATTR_GANK = 2,			// 对线意识
//	CARD_ATTR_ATK = 3,			// 团战输出
//	CARD_ATTR_EXI = 4,			// 团战走位
//	CARD_ATTR_CONS = 5,			// 经济发育
//	CARD_ATTR_CRIT = 6,			// 经济压制
//	CARD_ATTR_FARM = 7,			// 反应速度

// SKILL_MARK_FW_FLASH = 1,			// 闪电印记
// SKILL_MARK_FW_WOLF = 2,			// 战狼印记
// SKILL_MARK_STAGNANT = 3,			// 凝滞标记

// Skill.1: 属性变化
message ReportSkillAttribute {
  optional int32 target = 1;                            // 目标的RefreshID
  optional int32 attr = 2;                              // 属性类型
  optional int32 value = 3;                             // 变化后的属性值×100向下取整
  optional bool crit = 4;
  optional int32 coef = 5;                              // 技能属性系数×1000后四舍五入
  optional int32 delta = 6;                             // 技能属性增加值
}
// Skill.2: 血量变化
message ReportSkillHitpoint {
  optional int32 target = 1;                            // 目标的RefreshID
  optional int32 hitpoint = 2;                          // 变化后的HP值百分比×1000后四舍五入
  optional bool crit = 4;
  optional int32 delta_hitpoint = 5;                    // 伤害（HP百分比×1000后四舍五入）
}
// Skill.3: 特殊BUFF
message ReportSkillBuff {
  optional int32 target = 1;                            // 目标的RefreshID
  optional bool crit = 4;
}
// Skill.4 使技能失效/失去技能；或复制的技能
message ReportSkillLost {
  optional int32 target = 1;                            // 目标的RefreshID
  repeated int32 skill_ids = 2;                         // 失效/失去的技能；或复制的技能
  optional bool is_temporary = 3;                       // true表示失效，false表示失去
}
// 施放的技能
message ReportSkillEffect {
  optional int32 type = 1;                              // 技能分类
  repeated ReportSkillAttribute attribute_changes = 3; // 1. 属性变化：type=1,2
  repeated ReportSkillHitpoint hitpoint_changes = 4;   // 2. 血量变化（增加或减少）：type=3,14
  repeated ReportSkillBuff buffs = 5;                  // 3. 特殊BUFF：type=4,5,6
  repeated ReportSkillLost losts = 6;                  // 4. 失去技能：type=11,18
  repeated int32 targets = 7;                          // X. 其他效果的目标（可能没有目标）type=7,8,9,10;12,13,15,16,17,19
  // type=10,17时param表示伤害系数×100
  // type=19时param表示印记类型，param2表示数量
  // type=16时param表示躲避了的技能的ID
  // type=21时param表示技能ID
  optional int32 param = 9;
  optional int32 param2 = 10;
}
message ReportSkill {
  optional int32 skill_id = 1;
  optional int32 refresh_id = 2;
  repeated ReportSkillEffect effects = 3;
}

// 选手属性
message ReportProp {
  optional int32 refresh_id = 1;
  repeated IntPair attributes = 2;                      // key表示属性类型，value=属性值×100
}

// 选手生命状态
message ReportCard {
  optional int32 refresh_id = 1;
  optional int32 hitpoint = 2;                          // HP百分比×1000后四舍五入
  // optional int32 killer = 3;                            // HP=0时这个字段有效
}

// 循环体
message ReportRepeat {
  repeated ReportSkill skills = 1;
  repeated ReportCard cards = 2;                        // 选手生命状态
}

message ReportRound {
  optional int32 round_id = 1;
  optional EBattleRoundType round_type = 2;
  optional int32 ruler_id = 3;
  repeated int32 participativeRefreshID = 4;	          // 参与的刷新ID:40x2y
  repeated int32 deadRefreshID = 5;	                    // 死亡的刷新ID:40x2y
  // 1. 战斗准备阶段
  repeated ReportProp open_props = 6;                   // 选手属性，这里attributes.value里填具体值
  repeated ReportSkill open_skills = 7;                 // 开场技能
  // 2. 战斗开始
  repeated ReportSkill start_skills = 8;                // 技能阶段
  repeated ReportCard start_cards = 9;                  // 选手生命状态
  // 3. 循环体
  repeated ReportRepeat repeats = 10;
  // 4. 战斗结束
  optional int32 win_camp = 11;
  repeated int32 kills = 12;                            // 两个元素，分别是蓝方和红方的人头数
  repeated ReportSkill skills = 14;                     // gank或成长带来的属性增长
  repeated ReportProp end_props = 13;                   // 结束时选手的属性
}

// 获取上一场战斗的战报
message C2S_GetBattleReportRequest {
}
message S2C_GetBattleReportResponse {
  optional int32 win_camp = 1;                          // 胜利方：1是蓝方，2是红方
  repeated ReportRound report_rounds = 2;               // （回合内）各个回合的信息
}

message S2S_BattleResponse {
  optional ErrorCode error_code = 1;
  optional uint64 battle_uid = 2;
  optional BattleInfo battle_info = 3;
  optional ECardPosition mvp_position = 4;
  repeated uint32 glory_win_conditions = 5;
  optional int32 glory_star = 6;
  optional S2C_GetBattleReportResponse battle_report_response = 7;
}
