package protocol;
import "Error.proto";

enum ETeamType
{
  ETeamType_Default = 1; 		  //默认阵容
  ETeamType_Snake = 2;			  //蛇道巡回赛阵容
  ETeamType_StarGame = 3;	      //明星试练阵容
  ETeamType_BestTeam = 4;	      //最强战队阵容
}

enum ECardPosition {
	CARD_POSITION_INVALID = 0;
	CARD_POSITION_TOP = 1;
	CARD_POSITION_JUNGLER = 2;
	CARD_POSITION_MID = 3;
	CARD_POSITION_ADC = 4;
	CARD_POSITION_SUPPORT = 5;
};

message HeroTeam {
  optional uint32 top = 2;        // 上路hero_id
  optional uint32 jungler = 3;    // 打野hero_id
  optional uint32 mid = 4;        // 中路hero_id
  optional uint32 adc = 5;        // ADC hero_id
  optional uint32 support = 6;    // 辅助hero_id
}

message TeamCard {
  optional ECardPosition position = 1;
  optional uint64 card_uid = 2;
}

message Team {
  optional uint32 team_id = 1;
  optional uint32 top = 2;        // 上路card_id
  optional uint32 jungler = 3;    // 打野card_id
  optional uint32 mid = 4;        // 中路card_id
  optional uint32 adc = 5;        // ADC card_id
  optional uint32 support = 6;    // 辅助card_id
  repeated TeamCard cards = 7;
  optional uint32 battle_force = 8;// 战斗力
}

message CardProp {
  optional uint32 card_id = 1;    // 选手ID
  optional uint32 farm = 2;       // 对线		=> 团战技巧
  optional uint32 sps = 3;        // 压制		=> 运营能力
  optional uint32 atk = 4;        // 输出		=> 击杀能力
  optional uint32 exi = 5;        // 生存		=> 视野掌控
  optional uint32 gank = 6;       // GANK		=> 支援意识
  optional uint32 cons = 7;       // 意识		=> 能力爆发
  optional uint32 battle_force = 8;   // 选手战斗力
  optional uint32 crit = 9;        // 			=> 潜力上限
}

// 修改阵容
message C2S_ModifyTeamRequest {
  optional Team new_team = 1;     // 新阵容
}

// 修改阵容回复
message S2C_ModifyTeamResponse {
  optional ErrorCode result = 1;
  optional Team new_team = 2;     // 更新的阵容
}

// 获取阵容的出场属性
message C2S_TeamPropertyRequest {
  optional uint32 team_id = 1;
}

// 阵容的出场属性
message S2C_TeamPropertyResponse {
  optional ErrorCode result = 1;
  repeated CardProp props = 2;  // 每个选手的出场属性
  optional uint32 team_id = 3;
}

// 计算一个选手的基础属性
message C2S_CardBasePropRequest {
  optional uint64 card_uid = 1;
}

// 计算一个选手的基础属性的回复
message S2C_CardBasePropResponse {
  optional ErrorCode result = 1;
  optional uint64 card_uid = 2;
  optional CardProp base_prop = 3;
}

// 更新队伍信息
message S2C_UpdateTeamMsg
{ 
  optional Team new_team = 1;   // 更新的阵容
  repeated CardProp props = 2;  // 所有英雄的出场属性
}
