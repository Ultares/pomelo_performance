package protocol;
import "Error.proto";
import "Common.proto";
import "PlayerBasic.proto";
import "Card.proto";
import "Battle.proto";
import "Arena.proto";
import "BattleReport.proto";

message MatchCardRecord {
  repeated uint64 card_uids = 1;            // 需要长度是5个
  optional uint64 timestamp = 2;
}

message MatchRecord {
  optional uint64 timestamp = 1;
  optional string opponent_name = 2;
  optional int32 camp = 3;                  // 自己是蓝方还是红方
  optional int32 wincamp = 4;               // 胜利方
  optional UIntPair scores = 5;             // key和value分别是蓝方和红方的比分
  optional uint32 new_star_count = 7;       // 新的星数
  optional bool surrender_end = 8;          // 是否是投降结束的
  optional string opponent_server_name = 9;
}

// 跨服PVP数据
message MatchInfo {
  optional uint32 season = 15;              // 赛季
  optional uint32 star_count = 16;          // 星数
  optional uint32 consecutive_win = 17;     // 当前连胜数
  optional uint32 consecutive_lose = 18;    // 当前连败数
  optional uint32 win_count = 19;           // 这个赛季的总胜场
  optional uint32 total_count = 20;         // 这个赛季的总场次
  optional bytes kda_bytes = 21;
  optional uint32 season_reward_mark = 22;  // 赛季奖励领到了第几赛季
  repeated MatchCardRecord card_records = 1;// 用于展示最近常用阵容
  repeated MatchRecord match_records = 2;   // 比赛记录
}

message MatchPlayerData {
  optional uint32 server_id = 1;
  optional string server_name = 2;
  optional BasicInfo basic_info = 3;
  repeated Card frequently_used_cards = 4;  // 常用阵容，长度为5
  optional uint64 player_uid = 5;
  optional MatchInfo opponent_match_info = 6;
}

// ======================================================================
// 0. 请求跨服PVP数据
message C2S_MatchInfoRequest {
}
message S2C_MatchInfoResponse {
  optional ErrorCode error_code = 1;
  optional MatchInfo match_info = 2;
  optional string open_time = 3;
  optional uint64 current_season_start = 4;
  optional uint64 current_season_end = 5;
}

// ======================================================================
// 1. 请求匹配
message C2S_MatchStartRequest {
}
message S2C_MatchStartResponse {
  optional ErrorCode error_code = 1;
}

message S2S_MatchStartRequest {             // ***
  optional uint64 player_uid = 1;
  optional MatchPlayerData match_player_data = 2;
  optional MatchInfo match_info = 3;
}
message S2S_MatchStartResponse {
  optional uint64 player_uid = 1;
  optional ErrorCode error_code = 2;
}

// ======================================================================
// 1-1. 请求停止匹配
message C2S_MatchStopRequest {
}
message S2C_MatchStopResponse {
  optional ErrorCode error_code = 1;        // 可能无法停止匹配
}

message S2S_MatchStopRequest {              // ***
  optional uint64 player_uid = 1;
  optional bool exit_preparing = 2;
}
message S2S_MatchStopResponse {
  optional uint64 player_uid = 1;
  optional ErrorCode error_code = 2;
}

// ======================================================================
// 2. 匹配成功的通知
//    调整阵容使用的消息就是修改默认阵容的消息
message S2C_MatchSuccessNotify {
  optional MatchPlayerData opponent_data = 1;
}

message S2S_MatchSuccessNotify {
  optional uint64 player_uid = 1;
  optional MatchPlayerData opponent_data = 2;
}

// ======================================================================
// 3. 进入战斗的请求
//    GameServer收到这个消息或等到超时后，给MatchServer发S2S_MatchBattleRequest，
//    MatchServer::Room返回S2S_MatchBattleResponse；
//    MatchServer::Room里的人都发了这个消息后就算战斗并把结果算出来给两边的GameServer
message C2S_MatchEnterRequest {
}
message S2C_MatchEnterResponse {
  optional ErrorCode error_code = 1;        // 可能为“不在准备中”、“等待对方进入战斗”、“对方退出”
                                            // 如果是Success，之后紧接着S2C_EnterBattle
}

message S2S_MatchEnterRequest {             // ***
  optional uint64 player_uid = 1;
  optional ArenaPlayer arena_player = 2;
}
message S2S_MatchEnterResponse {
  optional uint64 player_uid = 1;
  optional ErrorCode error_code = 2;
}

message S2S_MatchBattleResponse {           // 战斗过程
  optional uint64 player_uid = 1;
  optional S2C_EnterBattle enter_battle_message = 2;
  optional MatchRecord new_match_record = 3;
  optional S2C_GetBattleReportResponse battle_report_response = 4;
}

// ======================================================================
// 3-1. 投降，暂时不做
//      某一方投降成功后，双方都会立刻收到S2C_MatchSurrenderResponse
message C2S_MatchSurrenderRequest {
  optional UIntPair scores = 1;
}
message S2C_MatchSurrenderResponse {
  optional ErrorCode error_code = 1;        // 可能无法投降
  optional UIntPair scores = 2;
  optional int32 wincamp = 3;
}

message S2S_MatchSurrenderRequest {
  optional uint64 player_uid = 1;
  optional UIntPair scores = 2;
}
message S2S_MatchSurrenderResponse {
  optional uint64 player_uid = 1;
  optional ErrorCode error_code = 2;
}

// ======================================================================
// 3-2. 比赛内交互
message C2S_MatchCommunicationRequest {
  optional string content = 1;
}
message S2C_MatchCommunicationNotify {
  optional uint64 speaker_uid = 1;           // 发言人
  optional string content = 2;
}

message S2S_MatchCommunicationRequest {
  optional uint64 player_uid = 1;
  optional string content = 2;
}
message S2S_MatchCommunicationNotify {
  optional uint64 player_uid = 1;
  optional uint64 speaker_uid = 2;
  optional string content = 3;
}

// ======================================================================
// 4. 离开战斗
//    客户端通知服务器客户端已经离开战斗，当某一方投降或两边都离开战斗后服务器更新积分
message C2S_MatchLeaveBattleRequest {
}

message S2S_MatchLeaveBattleRequest {     // ***
  optional uint64 player_uid = 1;
}
message S2S_MatchLeaveBattleResponse {
  optional uint64 player_uid = 1;
  optional MatchRecord match_record = 2;
}
