package protocol;
import "Common.proto";
import "Team.proto";
import "Error.proto";
import "Item.proto";

message SkillData {
  optional uint32 skill_id = 1;
  optional uint32 level = 2;
}

message TraitData {
  optional uint32 trait_type = 1;     // 特性类型,从1开始
  optional uint32 value = 2;          // 特性值
}

message HeroRecord {
  optional uint32 hero_id = 1;
  optional uint32 position = 2;       // 选手的第几个英雄
  optional uint32 level = 3;          // 初始为0
  optional uint32 wish_count = 4;     // 祝福值,也就是升级失败的次数
}

message HeroSuitEff
{
	optional int32 suit_id = 1;//套装ID
	optional int32 eff_if2 = 2;//套装效果2件套
	optional int32 eff_if4 = 3;//套装效果4件套
	optional int32 num = 4;//套装数量
}

message Card {
	optional uint64 card_uid = 9;       // uid,由于玩家能拥有一个同种类型的选手,所以这里用uid
	optional uint32 card_id = 1;        // 选手ID（即类型）
	optional uint32 star = 2;			// 星数
	optional uint32 level = 3;			// 等级
	optional uint32 exp = 4;			// 经验
	repeated HeroRecord hero_records = 5;// 拥有英雄
	optional uint32 get_time = 6;		// 获得时间
	optional uint32 lv_up_need_exp = 7;	// 升级需要的EXP
	repeated SkillData skills = 8;      // 技能数据
	repeated TraitData traits = 10;     // 养成系统保存的特性数据。实际的某个特性值=配置的初始值+这里保存的值。
	optional uint32 reset_count = 11;   // 特性的重置（特训/洗点）次数
	repeated I4U8Pair hero_equiped = 12;// 英雄池装备
	repeated HeroSuitEff all_suit_eff = 13;//英雄池套装效果
	optional uint32 awaken_level = 14;  // 觉醒次数（进阶阶段）
	optional bool lock = 15;            // 锁
	optional int32 skill_slot_show = 16;// 动画(解锁技能槽后进入技能界面时播放的动画)播放的次数
	optional int32 skin_id = 17;        // 装备的皮肤的ID，0表示没有装备皮肤
}

message Position {
	optional uint32 position_id = 1;			// 位置,1~5中的一个
	optional uint32 stage = 2;					// 进阶数
	optional uint32 material_count_1 = 3;		// 线上方向（对线、压制）加过多少材料
	optional uint32 material_count_2 = 4;		// 团战方向（输出、生存）加过多少材料
	optional uint32 material_count_3 = 5;		// 支援方向（gank、意识）加过多少材料
}

message CardInfo {
	repeated Card cards = 1;
	repeated Position positions = 2;
	repeated Team teams = 3;
	optional uint32 most_high_default_force = 4; // 默认阵容历史最高战力
	optional uint32 cur_snake_default_force = 5; // 最新蛇道过关战力
	repeated int32 skins = 6;                    // 拥有的运营皮肤的ID（升星获得的皮肤不在此列）
	repeated uint32 card_ids = 7;                // 曾经拥有过的选手ID
}

message CardShowData
{
	optional uint32 card_id = 1;
	optional int32 star = 2;
}

message CardShowInfo{
	repeated CardShowData card_data = 1;
	optional uint32 show_level = 2;
	optional uint32 show_exp = 3;
	optional uint32 real_exp = 4;
}

// 选手信息发生变化
message S2C_UpdateCards {
	repeated Card updated_cards = 1;            // 新的card_uid表示新增选手,旧的card_uid表示更新选手信息
	repeated Position updated_positions = 2;    // 对位置进阶程度的更新
	repeated uint64 deleted_cards = 3;          // 删掉的卡牌
	repeated int32 new_skins = 4;
}

// 使用道具给选手增加经验
message C2S_UseItemAddCardExp {
	optional uint64 item_uid = 1;
	optional uint32 item_count = 2;
	optional uint64 card_uid = 3;
}

// 使用道具给选手增加经验的回复
message S2C_UseItemAddCardExpResult {
	optional uint64 item_uid = 1;
	optional uint32 item_count = 2;
	optional uint64 card_uid = 3;
	required uint32 result = 4;					// 0表示成功,其他值表示失败
}

// 使用道具给某个位置增加材料
message C2S_UseItemAddMaterialToPosition {
	optional uint32 position_id = 1;
	optional uint32 direction_id = 2;			// 1表示线上；2表示团战；3表示支援
	optional uint64 item_uid = 3;				// 消耗哪个道具里的材料
	optional uint32 item_count = 4;				// 增加材料的数量
}

// 使用道具给某个位置增加材料的回复
message S2C_UseItemAddMaterialToPositionResult {
	optional C2S_UseItemAddMaterialToPosition request = 1;
	optional uint32 result = 2;
}

// 给某个位置升阶
message C2S_UpgradePositionStage {
	optional uint32 position_id = 1;
}

// 给某个位置升阶的回复
message S2C_UpgradePositionStageResult {
	optional C2S_UpgradePositionStage request = 1;
	optional uint32 result = 2;
}

// 给选手的某个英雄升阶（升级）一次
message C2S_UpgradeCardHero {
  optional uint32 card_id = 1;
  optional uint32 hero_position = 2;    // 第几个英雄
}

// 给选手的某个英雄升阶（升级）一次的回复
message S2C_UpgradeCardHeroResult {
  optional C2S_UpgradeCardHero request = 1;
  optional ErrorCode result = 2;
  optional HeroRecord hero_record = 3;
}

message C2S_GetCardInfoRequest{
}

message S2C_GetCardInfoResponse{
	optional CardInfo card_info = 1;
}

// 由于客户端没有能力处理GetCardInfoResponse,将GetCardInfoResponse里CardInfo的三个字段拆成三个协议发送

message C2S_GetCardInfoCardsRequest {
}

message S2C_GetCardInfoCardsResponse {
	repeated Card cards = 1;
}

message C2S_GetCardInfoPositionsRequest {
}

message S2C_GetCardInfoPositionsResponse {
	repeated Position positions = 1;
}

message C2S_GetCardInfoTeamsRequest {
}

message S2C_GetCardInfoTeamsResponse {
	repeated Team teams = 1;
}

// 碎片合成卡牌的请求
message C2S_CardComposeFragmentRequest {
  optional uint32 target_card_id = 1;
}
// 碎片合成卡牌的回复
message S2C_CardComposeFragmentResponse {
  optional C2S_CardComposeFragmentRequest request = 1;
	optional ErrorCode error_code = 2;
}

// 卡牌合成升星的请求
message C2S_CardComposeStarRequest {
	optional uint64 target_card_uid = 1;
	repeated uint64 material_card_uids = 2;
}
// 卡牌合成升星的回复
message S2C_CardComposeStarResponse {
	optional C2S_CardComposeStarRequest request = 1;
	optional ErrorCode error_code = 2;
	optional SkillData new_skill_data = 3;
}

// 选手加锁/去锁
message C2S_CardSwitchLockRequest {
  optional uint64 card_uid = 1;
}
// 选手加锁状态变化
message S2C_CardStarLockUpdate {
	optional ErrorCode error_code = 1;
  optional uint64 card_uid = 2;
  optional bool is_locked = 3;
}

// 升级技能的请求
message C2S_CardUpgradeSkillRequest {
  optional uint64 card_uid = 1;
	repeated uint64 material_card_uids = 2;   // 使用某个同类型的卡牌或道具作为材料给card_uid升级随机一个技能
	repeated uint64 material_item_uids = 3;
}
// 升级技能的回复
message S2C_CardUpgradeSkillResponse {
	optional ErrorCode error_code = 1;
	optional Card old_card = 2;
	optional Card new_card = 3;
}

// 重置选手特性的请求
message C2S_CardResetTraitRequest {
  optional uint64 card_uid = 1;
}
// 重置选手特性的回复
message S2C_CardResetTraitResponse {
	optional ErrorCode error_code = 1;
	optional Card old_card = 2;
	optional Card new_card = 3;
}

// 选手进阶请求
message C2S_CardAwakenRequest {
  optional uint64 card_uid = 1;           // 目标选手UID
}
// 选手进阶回复
message S2C_CardAwakenResponse {
  optional ErrorCode error_code = 1;
  optional uint64 card_uid = 2;           // 目标选手UID
}

message C2S_GetCardShowRequest
{
}

message S2C_UpdateCardShowMsg
{
	optional CardShowInfo show_info = 1;
}

// 打开选手技能界面时发送
message C2S_CardSkillSlotShowRequest {
  optional uint64 card_uid = 1;
}

// 装备皮肤
message C2S_CardEquipSkinRequest {
  optional uint64 card_uid = 1;
  optional int32 skin_id = 2;
}
message S2C_CardEquipSkinResponse {
  optional ErrorCode error_code = 1;
  optional uint64 card_uid = 2;
}

message C2S_CardShowLevelUp
{
}

// 重置选手
message C2S_CardResetRequest {
  optional uint64 card_uid = 1;
}
message S2C_CardResetResponse {
  optional ErrorCode error_code = 1;
  optional Card card = 2;               // 更新的选手数据
  repeated Item items = 3;              // 返还的物品
}
