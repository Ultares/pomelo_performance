package protocol;
import "Common.proto";
import "Player.proto";
import "Rank.proto";
import "Account.proto";
import "Mail.proto";
import "Guess.proto";

message MailData
{
	optional string opps_str = 1;		//邮件对象字符串
	optional MailContext mail = 2;		//邮件
	//optional uint32 delete_time = 3;    //邮件失效时间
	optional uint32 add_time = 4;		//邮件建立时间
	optional uint64 mail_id = 5;		//邮件ID
	optional uint32 disable_time = 6;   //邮件失效时间
}

message CacheMail
{
	optional uint64 opp_id = 1;			//邮件目标对象
	repeated MailContext mail_ctxs = 2;	//邮件
}

message MailStore
{
	repeated MailData mail_datas = 1;	//全服发送的邮件仓库
	repeated CacheMail cache_mails = 2; //缓存邮件
	optional uint32 next_flush_time = 3;//下次全服活动邮件的时间
}

message GMActionInfo
{
	optional string action = 1;
	optional uint32 add_time = 2;
	optional uint32 del_time = 3;
	optional bytes json_string = 4;
	optional uint32 idx = 5;
	optional uint32 op_type = 6; // 0 普通玩家
	optional uint64 op_uid = 7;
}

message ServerBestTeam
{
	optional uint32 season = 1;
	optional uint32 season_start_time = 2;//周期开始时间
	optional uint32 season_over_time = 3;//周期结束时间
}

message ServerLeagueInfo
{
  optional uint32 season = 1;
  optional uint64 start_time = 2;
}

message ServerInfo
{
	optional string global_sid = 1;     
	optional uint32 first_open_time = 2;
	optional MailStore mail_store = 3;
	repeated GMActionInfo gm_action_info = 4;
	optional uint32 gm_act_idx = 5;
	optional ServerBestTeam svr_best_team = 6;
	optional ServerLeagueInfo server_league_info = 7;
	repeated LeaderboardScoreData best_team_last_top_list = 8;
}

message S2S_ServerHandShakeMsg
{
    optional int32 server_id = 1;
    optional int32 server_type = 2;
    //optional bytes server_name = 3;
	optional string global_sid = 4;
}

message S2S_ServerHandShakeVerifyMsg
{
    optional int32 server_id = 1;
    optional int32 server_type = 2;
    //optional bytes server_name = 3;
}

// game_server
message S2S_PlayerLoginSuccess
{
	optional uint32 session_id = 1;
	optional uint64 player_id = 2;
}

message S2S_AccountTimeOutMsg
{
	optional string account = 1;
	optional string platform_id = 2;
	optional string global_server_id = 3;
}

message S2S_AccountNeedSaveMsg
{
	optional string account = 1;
	optional string platform_id = 2;
	optional string global_server_id = 3;
}

enum ESvr
{
	ESvr_ReadyClose = 1;
	ESvr_Closing = 2;
	ESvr_CanClose = 3;
}

enum EServerAction
{
	EServerAction_Close = 1;
}

message S2S_ServerActionRequest
{
	optional int32 server_action = 1;
}

message S2S_ServerActionResponse
{
	optional int32 res = 1;
	optional int32 server_action = 2;
	optional string global_sid = 3;
}

// cache_server
message S2S_SaveAccountInfoRequest
{
	optional AccountInfo account_info = 1;
}

message S2S_SaveAccountInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryAccountInfoRequest
{
	optional int32 query_seq = 1;
	optional string account_id = 2;
}

message S2S_QueryAccountInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional AccountInfo account_info = 3;
}

message S2S_SaveServerInfoRequest
{
	optional ServerInfo server_info = 1;
}

message S2S_SaveServerInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryServerInfoRequest
{
	optional int32 query_seq = 1;
	optional string global_sid = 2;
}

message S2S_QueryServerInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional ServerInfo server_info = 3;
}

message S2S_SaveRankInfoRequest
{
	optional RankInfo rank_info = 1;
}

message S2S_SaveRankInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryRankInfoRequest
{
	optional int32 query_seq = 1;
	optional string global_sid = 2;
	optional string rank_type = 3;
}

message S2S_QueryRankInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional RankInfo rank_info = 3;
}

message S2S_SavePlayerInfoRequest
{
	optional PlayerInfo player_info = 1;
}

message S2S_SavePlayerInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryPlayerByPlayerIDRequest
{
	optional int32 query_seq = 1;
	optional uint64 player_id = 2;
}

message S2S_QueryPlayerByPlayerIDResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional PlayerInfo player_info = 3;
}

message S2S_DelCacheMsg
{
	repeated string keyword = 1;
	repeated int32 table = 2;
}

// data_server
message RowData
{
    repeated bytes key = 1;
    //optional bytes data = 2;
}

message DBPlayerDatas
{
	optional string player_id = 1;
	optional bytes player_data = 2;
}

message DBPlayerNameDatas
{
	optional string name = 1;
	optional string player_id = 2;
}

message DBAccountDatas
{
	optional string account_id = 1;
	optional bytes account_data = 2;
}

message DBServerDatas
{
	optional string global_server_id = 1;
	optional bytes server_data = 2;
}

message DBRankDatas
{
	optional string global_server_id = 1;
	optional string rank_type = 2;
	optional bytes rank_data = 3;
}

message S2S_DbReplaceRequest
{
	optional int32 query_seq = 1;
	optional int32 table_type = 2;
	optional int32 session_id = 5;
	optional DBPlayerDatas player_datas = 6;
	optional DBPlayerNameDatas player_name_datas = 7;
	optional DBAccountDatas account_datas = 8;
	optional DBServerDatas server_datas = 9;
	optional DBRankDatas rank_datas = 10;
}

message S2S_DbQueryRequest
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    optional int32 limit = 4;
    optional int32 offset = 5;
	optional int32 session_id = 6;
	optional DBPlayerDatas player_datas = 7;
	optional DBPlayerNameDatas player_name_datas = 8;
	optional DBAccountDatas account_datas = 9;
	optional DBServerDatas server_datas = 10;
	optional DBRankDatas rank_datas = 11;
}

message S2S_DbDeleteRequest
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    repeated bytes keys = 3;
    optional int32 session_id = 4;
	repeated bytes key_types = 5;
}

message S2S_DbOperateResponse
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    //repeated RowData rows = 3;
    optional int32 error_code = 4;
	optional int32 operate_type = 5;

	repeated int32 save_table = 6;
	repeated string save_keyword = 7;
	repeated int32 save_seq = 8;

	optional DBPlayerDatas player_datas = 9;
	optional DBPlayerNameDatas player_name_datas = 10;
	optional DBAccountDatas account_datas = 11;
	optional DBServerDatas server_datas = 12;
	optional DBRankDatas rank_datas = 13;
}

// log_server
enum OperationLogType
{
  OPERATION_LOG_TYPE_INVALID = 0;
  //OPERATION_LOG_TYPE_ONLINE_ROLE_NUM = 1;                 // 在线日志
  //OPERATION_LOG_TYPE_LOGIN_ROLE = 2;                      // 登录日志
  //OPERATION_LOG_TYPE_LOGOUT_ROLE = 3;                     // 登出日志
  //OPERATION_LOG_TYPE_ZUANSHI_GAIN = 4;                    // 其他类获得元宝日志
  OPERATION_LOG_TYPE_ACTORREG = 5;                          // actOrReg 激活注册
  OPERATION_LOG_TYPE_online = 6;							// online 在线
  OPERATION_LOG_TYPE_coin = 7;								// coin 虚拟币
  OPERATION_LOG_TYPE_itemBuy = 8;							// itemBuy 购买道具
  OPERATION_LOG_TYPE_itemUse = 9;							// itemUse 使用道具
  OPERATION_LOG_TYPE_itemGet = 10;							// itemGet 道具掉落
  OPERATION_LOG_TYPE_levelUp = 11;							// levelUp 角色升级
  OPERATION_LOG_TYPE_EVENT = 30;							// event自定义事件

}

enum OperationLogEntryType
{
  OPERATION_LOG_ENTRY_INVALID = 0;
  //OPERATION_LOG_ENTRY_ONLINE_ROLE_NUM = 1;           // "online"
  //OPERATION_LOG_ENTRY_ACCOUNT_ID = 2;                // "account_id"
  //OPERATION_LOG_ENTRY_ROLE_NAME = 4;                 // "role_name"
  //OPERATION_LOG_ENTRY_LOGIN_TIME = 5;                // "login_time"
  //OPERATION_LOG_ENTRY_LOGOUT_TIME = 6;               // "logout_time"
  //OPERATION_LOG_ENTRY_ROLE_LEVEL = 7;                // "role_level"
  //OPERATION_LOG_ENTRY_FREE_ZUANSHI = 8;              // "free_zuanshi"
  //OPERATION_LOG_ENTRY_ZUANSHI = 9;                   // "zuanshi"
  //OPERATION_LOG_ENTRY_REASON = 10;                   // "reason"
  OPERATION_LOG_ENTRY_appId = 11;						// "appId"
  OPERATION_LOG_ENTRY_appVersion = 12;					// "appVersion"
  OPERATION_LOG_ENTRY_accountId = 13;					// "accountId"
  OPERATION_LOG_ENTRY_roleName = 14;					// "roleName"
  OPERATION_LOG_ENTRY_platform = 15;					// "platform"
  OPERATION_LOG_ENTRY_gameRegion = 16;					// "gameRegion"
  OPERATION_LOG_ENTRY_channel = 17;						// "channel"
  OPERATION_LOG_ENTRY_accountType = 18;					// "accountType"
  OPERATION_LOG_ENTRY_mac = 19;							// "mac"
  OPERATION_LOG_ENTRY_imei = 20;						// "imei"
  OPERATION_LOG_ENTRY_resolution = 21;					// "resolution"
  OPERATION_LOG_ENTRY_osVersion = 22;					// "osVersion"
  OPERATION_LOG_ENTRY_brand = 23;						// "brand"
  OPERATION_LOG_ENTRY_language = 24;					// "language"
  OPERATION_LOG_ENTRY_ip = 25;							// "ip"
  OPERATION_LOG_ENTRY_operators = 26;					// "operators"

  OPERATION_LOG_ENTRY_actTime = 50;						// "actTime"
  OPERATION_LOG_ENTRY_regTime = 51;						// "regTime"
  OPERATION_LOG_ENTRY_eventId = 52;						// "eventId"
  OPERATION_LOG_ENTRY_startLevel = 53;					// "startLevel"
  OPERATION_LOG_ENTRY_endLevel = 54;					// "endLevel"
  OPERATION_LOG_ENTRY_interval = 55;					// "interval"
  OPERATION_LOG_ENTRY_loginTime = 56;					// "loginTime"
  OPERATION_LOG_ENTRY_onlineTime = 57;					// "onlineTime"
  OPERATION_LOG_ENTRY_coinNum = 58;						// "coinNum"
  OPERATION_LOG_ENTRY_coinType = 59;					// "coinType"
  OPERATION_LOG_ENTRY_type = 60;						// "type"
  OPERATION_LOG_ENTRY_isGain = 61;						// "isGain"
  OPERATION_LOG_ENTRY_totalCoin = 62;					// "totalCoin"
  OPERATION_LOG_ENTRY_itemId = 63;						// "itemId"
  OPERATION_LOG_ENTRY_itemType = 64;					// "itemType"
  OPERATION_LOG_ENTRY_itemCnt = 65;						// "itemCnt"
  OPERATION_LOG_ENTRY_reason = 66;						// "reason"
  OPERATION_LOG_ENTRY_msgTime = 67;						// "msgTime"
  
  OPERATION_LOG_ENTRY_labelMap = 200;					// "labelMap"
  OPERATION_LOG_ENTRY_eventRegion = 201;				// "eventRegion"
  OPERATION_LOG_ENTRY_eventAccount = 202;				// "eventAccount"
  OPERATION_LOG_ENTRY_dungeonId = 203;					// "dungeonId"
  OPERATION_LOG_ENTRY_eventTime = 204;					// "eventTime"
  OPERATION_LOG_ENTRY_battleRes = 205;					// "battleRes"
  OPERATION_LOG_ENTRY_gambleType = 206;					// "gambleType"
  OPERATION_LOG_ENTRY_teamType = 207;					// "teamType"
  OPERATION_LOG_ENTRY_teamInfo = 208;					// "teamInfo"
  OPERATION_LOG_ENTRY_cardOldStar = 209;				// "cardOldStar"
  OPERATION_LOG_ENTRY_cardNewStar = 210;				// "cardNewStar"
  OPERATION_LOG_ENTRY_cardId = 211;						// "cardId"
  OPERATION_LOG_ENTRY_talentId = 212;					// "talentId"
  OPERATION_LOG_ENTRY_oldLV = 213;						// "oldLV"
  OPERATION_LOG_ENTRY_newLV = 214;						// "newLV"
  OPERATION_LOG_ENTRY_talentGroupId = 215;				// "talentGroupId"
  OPERATION_LOG_ENTRY_slot = 216;						// "slot"
  OPERATION_LOG_ENTRY_top = 217;						// "top"
  OPERATION_LOG_ENTRY_jungler = 218;					// "jungler"
  OPERATION_LOG_ENTRY_mid = 219;						// "mid"
  OPERATION_LOG_ENTRY_adc = 220;						// "adc"
  OPERATION_LOG_ENTRY_support = 221;					// "support"
  OPERATION_LOG_ENTRY_teamId = 222;						// "teamId"
  OPERATION_LOG_ENTRY_gamebleType = 223;				// "gamebleType"
  OPERATION_LOG_ENTRY_oldStar = 224;					// "oldStar"
  OPERATION_LOG_ENTRY_newStar = 225;					// "newStar"
  OPERATION_LOG_ENTRY_heroId = 226;						// "oldStar"
  OPERATION_LOG_ENTRY_heroEquip = 227;					// "heroEquip"
  OPERATION_LOG_ENTRY_cardPosition = 231;				// "cardPosition"
  OPERATION_LOG_ENTRY_talentResetCount = 232;			// "talentResetCount"
}

message OperationLogEntry
{
  optional OperationLogEntryType entry_type = 1;
  //optional int64 int64_value = 2;
  //optional uint64 uint64_value = 3;
  //optional double double_value = 4;
  optional string string_value = 5;
}

message S2S_OperationLogRequest
{
  optional OperationLogType log_type = 1;
  //optional uint32 zone_id = 2;                            // server
  //optional uint64 timestamp = 3;                          // online_time
  optional string account = 4;
  repeated OperationLogEntry base_entries = 5;
  repeated OperationLogEntry log_entries = 20;
}

//GM
message S2S_GMOpearteRequest
{
	optional bytes json_string = 1;
	optional int32 id = 2;
}

message S2S_GMOpearteResponse
{
	optional int32 error_code = 1;
	optional int32 id = 2;
	optional bytes data_string = 3;
}

message S2S_GMRankListRequest
{
}

message GmPlayerData
{
	optional string account = 1;
	optional uint64 player_id = 2;
	optional uint32 battle_force = 3;
}

message GmRankData
{
	optional uint32 rank_type = 1;
	repeated GmPlayerData player_data = 2;
}

message S2S_GMRankListResponse
{
	repeated GmRankData gm_rank = 1;
	optional string global_sid = 2;
}

//ClusterServer
message S2S_GetServerGuessInfoRequest
{
}

message S2S_GetServerGuessInfoResponse
{
	optional ServerBetInfo server_bet_info = 1;
}

message S2S_GmIntroGuessRequest
{
	optional int32 bet_id = 1;
	optional int32 index = 2;
}

message S2S_GmIntroGuessResponse
{
	optional int32 res = 1;
}

message S2S_UploadBetAmountMsg
{
	optional EGuessType guess_type = 1;
	optional EBetProj proj_type = 2;
	optional EBetTeam team_type = 3;
	optional uint32 match_id = 4;
	optional uint32 amount = 5;
}

message S2S_GiftCodeVerifyRequest
{
	optional string code = 1;
	optional uint64 player_id = 2;
	optional string global_sid = 3;
}

message S2S_GiftCodeVerifyResponse
{
	optional int32 res = 1;
	repeated IntPair items = 2;
	optional string code = 3;
	optional string prefix = 4;
}
