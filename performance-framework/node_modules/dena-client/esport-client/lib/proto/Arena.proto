package protocol;
import "PlayerBasic.proto";
import "Team.proto";
import "Card.proto";
import "Error.proto";
import "Strategy.proto";

// 擂台赛：
// 1. 获取/刷新擂台赛的对手信息。
// 2. 获取擂台赛的排行榜（和自己）的信息。
// 3. 初始时榜里都是机器人。
// 4. 设置本方的防守阵容和Banlist。
// 5. 发送挑战某个对手的请求；结束后发送结果给服务器；服务器更新双方排名。
//    （双方在出结果之前都不能再被其他人挑战）。
//    备注:服务器需记录玩家挑战阵容，下次挑战时默认使用上一次的，
//         该阵容仅适用于擂台赛功能，不同于其他系统玩家所保存的阵容
// 6. 查看自己的挑战和被挑战记录。
// 7. 每天的挑战次数有上限，每天的上限可以通过购买增加。
//*8. 挑战胜利得到的积分可以在特定的商城中购买东西。
//    （商城相关功能统一在Shop系统中实现。）
//*9. 擂台赛前若干名每晚能通过邮件获得排名奖励。
//    （然而并没有邮件功能。）

// 需要的配置：
// 1. 初始时加入的机器人的数据。M_Robot.xlsx
// 2. 挑战胜利获得的积分。 M_Require_Reward.xlsx
// 3. 擂台赛挑战测试重置时间及每次刷新的价格。M_Cost.xlsx
// 4. 排名奖励（时间、奖励内容）。 M_Require_Reward.xlsx

// ArenaTeam中用到的卡牌（选手）数据。
message ArenaCard {
  optional Card card = 1;
  optional CardProp card_prop = 2;
  optional CardProp base_card_prop = 3;
}

// 擂台赛中用到的阵容数据。
message ArenaTeam {
  optional ArenaCard top = 2;           // 上路card_id
  optional ArenaCard jungler = 3;       // 打野card_id
  optional ArenaCard mid = 4;           // 中路card_id
  optional ArenaCard adc = 5;           // ADC card_id
  optional ArenaCard support = 6;       // 辅助card_id
}

// 擂台赛中用到的对手（玩家）数据。
message ArenaPlayer {
  optional uint32 index = 1;            // 对手数据ID
  optional uint64 uid = 2;              // 对手UID
  optional BasicInfo basic_info = 3;    // 对手的基本信息
  optional ArenaTeam team = 4;          // 对手的出战或防守阵容
  optional uint32 battle_force = 5;     // 对手战斗力
  optional uint32 rank = 6;             // 对手排名
  // repeated Position positions = 7;      // 对手的位置升阶的信息（据说不用显示）
  // repeated uint32 hero_ids = 8;         // 擂台赛使用次数最高的英雄（不超过5个）（据说不用显示）
  repeated uint32 banlist = 9;          // 对手禁用的英雄
  optional uint32 battle_team_id = 10;  // 对手战队ID
  optional StrategyPage strategy_page = 11; // 对手的战术
}

// 保存对战记录。
message ArenaRecord {
  optional bool is_defence = 1;         // 是否是被别人挑战
  optional ArenaPlayer opponent = 2;    // 对手数据
  optional ArenaTeam my_team = 3;       // 玩家用的阵容
  optional bool is_win = 4;             // 玩家是否胜利
  optional uint32 old_rank = 5;         // 玩家的旧排名
  optional uint32 new_rank = 6;         // 玩家的新排名
  optional uint32 timestamp = 7;        // 挑战时间
}

// 保存各个英雄的使用次数。（暂时不用）
message ArenaHero {
  optional uint32 hero_id = 1;
  optional uint32 count = 2;            // 英雄的使用次数
}

message ArenaInfo {
  optional Team team = 1;                  // 挑战阵容
  optional Team defence_team = 2;          // 防守阵容
  repeated uint32 banlist = 3;             // 禁止使用的英雄ID
  optional uint32 timestamp = 4;           // 时间戳
  optional uint32 bought_count = 5;        // 时间戳表示的那一天的已购买次数
  optional uint32 challenge_count = 6;     // 时间戳表示的那一天的已挑战次数
  optional uint32 max_challenge_count = 7; // 时间戳表示的那一天的最大挑战次数
  repeated ArenaRecord arena_records = 8;  // 被挑战的记录
  // repeated ArenaHero arena_heros = 9;      // 记录擂台赛中每个英雄的使用次数（暂时不用）
  optional ArenaPlayer opponent = 10;      // 有这个字段表示在战斗状态
  optional uint32 rank = 11;               // 当前排名
  optional uint32 battle_force = 12;       // 挑战阵容的战斗力
  optional uint32 defence_battle_force = 13;       // 防守阵容的战斗力
}

// 获取擂台赛相关信息。
message C2S_ArenaInfoRequest {
}

// 获取擂台赛相关信息的回复。
message S2C_ArenaInfoResponse {
  optional ArenaInfo arena_info = 1;
}

// 修改挑战阵容。
message C2S_ModifyArenaTeamRequest {
  optional Team team = 1;                         // 新阵容（可以为空）
  optional Team defence_team = 2;                 // 新阵容（可以为空）
  repeated uint32 banlist = 3;                    // 禁止使用的英雄ID （为空表示不ban英雄）
}

// 修改挑战阵容的回复。
message S2C_ModifyArenaTeamResponse {
  optional ErrorCode result = 1;
  optional Team team = 2;     // 更新的阵容
  optional Team defence_team = 3;     // 更新的阵容
  repeated uint32 banlist = 4;   // 禁止使用的英雄ID
  optional uint32 new_battle_force = 5;               // 新的挑战阵容的战斗力
  optional uint32 new_defence_battle_force = 6;       // 新的防守阵容的战斗力
}

// 获取擂台赛排行榜信息。
message C2S_ArenaRankRequest {
}

// 获取擂台赛排行榜的回复。
message S2C_ArenaRankResponse {
  repeated ArenaPlayer arena_players = 1;          // 排名数据，包括玩家自己的数据也在其中
}

// 刷新/获取擂台赛的对手列表。
message C2S_GetArenaOpponent {
}

// 获取擂台赛的对手列表的回复。
message S2C_GetArenaOpponentResult {
  optional ErrorCode error_code = 1;
  repeated ArenaPlayer opponents = 2;
}

// 购买一次擂台赛的挑战次数。
message C2S_ArenaBuyCount {
}

// 购买一次擂台赛的挑战次数的回复。
message S2C_ArenaBuyCountResponse {
  optional ErrorCode error_code = 1;
  optional uint32 new_max_challenge_count = 7;
  optional uint32 new_bought_count = 5;
  optional uint32 new_challenge_count = 6;
}

// =============================================================================
// 请求挑战某个对手。
// 可能不能挑战： “正在被挑战的玩家不会进入其他玩家的挑战列表”、次数用完等。
// // 由服务器算出各个位置使用的英雄，因为需要显示玩家在擂台赛使用次数最高的五个英雄。
// 如果重复发挑战请求则算上一次失败。
message C2S_ChallengeArenaOpponent {
  optional uint32 index = 1;                      // ArenaPlayer中的index
}

// 请求挑战某个对手的回复，成功后双方进入战斗状态。
message S2C_ArenaChallengeResult {
  optional C2S_ChallengeArenaOpponent request = 1;
  optional ErrorCode error_code = 2;
  // optional HeroTeam hero_team = 3;               // 由于常用英雄不用显示，这里可以由客户端计算
  // optional HeroTeam opponent_hero_team = 4;      // 由于常用英雄不用显示，这里可以由客户端计算
  optional uint32 new_challenge_count = 5;          // 今天的已挑战次数
  optional bool is_win = 6;                         // true表示赢，false表示输 （改用Player.proto中的S2C_EnterBattle）
  // repeated uint32 condition_ids = 7;                // 根据双方的属性值算出来的、用于表现的局势ID （改用Player.proto中的S2C_EnterBattle）
  optional uint32 score = 8;                        // 新加的积分
}

// （改用Player.proto中的C2S_LeaveBattle）
// 客户端向服务器发送挑战擂台赛的战斗结果。
// 服务器把战斗记录保存下来并更新排名，获得的积分通过S2C_UpdateResources更新。
// 如果超过30分钟不发则算挑战失败。
// message C2S_ArenaChallengeResult {
//   optional bool is_win = 1;
// }

// 新的擂台赛挑战记录。被挑战者如果在线的话也会收到这个消息。
message S2C_NewArenaRecord {
  optional ArenaRecord arena_record = 1;
  optional ErrorCode error_code = 2;
  optional bool is_win = 6;                         // true表示赢，false表示输
  optional uint32 score = 8;                        // 新加的积分
}

