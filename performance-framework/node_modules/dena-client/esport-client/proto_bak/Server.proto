package protocol;
import "Player.proto";
import "Rank.proto";
import "Account.proto";
import "Mail.proto";

message MailData
{
	optional string opps_str = 1;		//邮件对象字符串
	optional MailContext mail = 2;		//邮件
	optional uint32 delete_time = 3;    //邮件失效时间
	optional uint32 add_time = 4;		//邮件建立时间
	optional uint64 mail_id = 5;		//邮件ID
}

message CacheMail
{
	optional uint64 opp_id = 1;			//邮件目标对象
	repeated MailContext mail_ctxs = 2;	//邮件
}

message MailStore
{
	repeated MailData mail_datas = 1;	//全服发送的邮件仓库
	repeated CacheMail cache_mails = 2; //缓存邮件
}

message GMActionInfo
{
	optional string action = 1;
	optional uint32 add_time = 2;
	optional uint32 del_time = 3;
	optional bytes json_string = 4;
	optional uint32 idx = 5;
	optional uint32 op_type = 6; // 0 普通玩家
	optional uint64 op_uid = 7;
}

message ServerBestTeam
{
	optional uint32 season = 1;
	optional uint32 season_start_time = 2;//周期开始时间
	optional uint32 season_over_time = 3;//周期结束时间
}

message ServerInfo
{
	optional string global_sid = 1;     
	optional uint32 first_open_time = 2;
	optional MailStore mail_store = 3;
	repeated GMActionInfo gm_action_info = 4;
	optional uint32 gm_act_idx = 5;
	optional ServerBestTeam svr_best_team = 6;
}

message S2S_ServerHandShakeMsg
{
    optional int32 server_id = 1;
    optional int32 server_type = 2;
    //optional bytes server_name = 3;
	optional string global_sid = 4;
}

message S2S_ServerHandShakeVerifyMsg
{
    optional int32 server_id = 1;
    optional int32 server_type = 2;
    //optional bytes server_name = 3;
}

message S2S_LogMsg
{
	optional int32 server_type = 1;
	optional bytes log_level = 2;
	optional bytes log_str = 3;
}

// game_server
message S2S_PlayerLoginSuccess
{
	optional uint32 session_id = 1;
	optional uint64 player_id = 2;
}

message S2S_AccountTimeOutMsg
{
	optional string account = 1;
	optional string platform_id = 2;
	optional string global_server_id = 3;
}

enum ESvr
{
	ESvr_ReadyClose = 1;
	ESvr_Closing = 2;
	ESvr_CanClose = 3;
}

enum EServerAction
{
	EServerAction_All = 1;
	EServerAction_Game_ReGeng = 2;
	EServerAction_Game_Cache_ReGeng = 3;
}

message S2S_ServerActionRequest
{
	optional int32 server_action = 1;
}

message S2S_ServerActionResponse
{
	optional int32 res = 1;
	optional int32 server_action = 2;
	optional string global_sid = 3;
}

// cache_server
message S2S_SaveAccountInfoRequest
{
	optional AccountInfo account_info = 1;
}

message S2S_SaveAccountInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryAccountInfoRequest
{
	optional int32 query_seq = 1;
	optional string account_id = 2;
}

message S2S_QueryAccountInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional AccountInfo account_info = 3;
}

message S2S_SaveServerInfoRequest
{
	optional ServerInfo server_info = 1;
}

message S2S_SaveServerInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryServerInfoRequest
{
	optional int32 query_seq = 1;
	optional string global_sid = 2;
}

message S2S_QueryServerInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional ServerInfo server_info = 3;
}

message S2S_SaveRankInfoRequest
{
	optional RankInfo rank_info = 1;
}

message S2S_SaveRankInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryRankInfoRequest
{
	optional int32 query_seq = 1;
	optional string global_sid = 2;
	optional string rank_type = 3;
}

message S2S_QueryRankInfoResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional RankInfo rank_info = 3;
}

message S2S_SavePlayerInfoRequest
{
	optional PlayerInfo player_info = 1;
}

message S2S_SavePlayerInfoResponse
{
	optional int32 error_code = 1;
}

message S2S_QueryPlayerByPlayerIDRequest
{
	optional int32 query_seq = 1;
	optional uint64 player_id = 2;
}

message S2S_QueryPlayerByPlayerIDResponse
{
	optional int32 query_seq = 1;
	optional int32 error_code = 2;
	optional PlayerInfo player_info = 3;
}

message S2S_DelCacheMsg
{
	repeated string keyword = 1;
	repeated int32 table = 2;
}

// data_server
message RowData
{
    repeated bytes key = 1;
    //optional bytes data = 2;
}

message DBPlayerDatas
{
	optional string player_id = 1;
	optional bytes player_data = 2;
}

message DBPlayerNameDatas
{
	optional string name = 1;
	optional string player_id = 2;
}

message DBAccountDatas
{
	optional string account_id = 1;
	optional bytes account_data = 2;
}

message DBServerDatas
{
	optional string global_server_id = 1;
	optional bytes server_data = 2;
}

message DBRankDatas
{
	optional string global_server_id = 1;
	optional string rank_type = 2;
	optional bytes rank_data = 3;
}

message S2S_DbReplaceRequest
{
	optional int32 query_seq = 1;
	optional int32 table_type = 2;
	optional int32 session_id = 5;
	optional DBPlayerDatas player_datas = 6;
	optional DBPlayerNameDatas player_name_datas = 7;
	optional DBAccountDatas account_datas = 8;
	optional DBServerDatas server_datas = 9;
	optional DBRankDatas rank_datas = 10;
}

message S2S_DbQueryRequest
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    optional int32 limit = 4;
    optional int32 offset = 5;
	optional int32 session_id = 6;
	optional DBPlayerDatas player_datas = 7;
	optional DBPlayerNameDatas player_name_datas = 8;
	optional DBAccountDatas account_datas = 9;
	optional DBServerDatas server_datas = 10;
	optional DBRankDatas rank_datas = 11;
}

message S2S_DbDeleteRequest
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    repeated bytes keys = 3;
    optional int32 session_id = 4;
	repeated bytes key_types = 5;
}

message S2S_DbOperateResponse
{
    optional int32 query_seq = 1;
    optional int32 table_type = 2;
    //repeated RowData rows = 3;
    optional int32 error_code = 4;
	optional int32 operate_type = 5;

	repeated int32 save_table = 6;
	repeated string save_keyword = 7;
	repeated int32 save_seq = 8;

	optional DBPlayerDatas player_datas = 9;
	optional DBPlayerNameDatas player_name_datas = 10;
	optional DBAccountDatas account_datas = 11;
	optional DBServerDatas server_datas = 12;
	optional DBRankDatas rank_datas = 13;
}

// log_server
enum OperationLogType
{
  OPERATION_LOG_TYPE_INVALID = 0;
  OPERATION_LOG_TYPE_ONLINE_ROLE_NUM = 1;                 // 在线日志
  OPERATION_LOG_TYPE_LOGIN_ROLE = 2;                      // 登录日志
  OPERATION_LOG_TYPE_LOGOUT_ROLE = 3;                     // 登出日志
  OPERATION_LOG_TYPE_ZUANSHI_GAIN = 4;                    // 其他类获得元宝日志
}

enum OperationLogEntryType
{
  OPERATION_LOG_ENTRY_INVALID = 0;
  OPERATION_LOG_ENTRY_ONLINE_ROLE_NUM = 1;           // "online"
  OPERATION_LOG_ENTRY_ACCOUNT_ID = 2;                // "account_id"
  OPERATION_LOG_ENTRY_ROLE_NAME = 4;                 // "role_name"
  OPERATION_LOG_ENTRY_LOGIN_TIME = 5;                // "login_time"
  OPERATION_LOG_ENTRY_LOGOUT_TIME = 6;               // "logout_time"
  OPERATION_LOG_ENTRY_ROLE_LEVEL = 7;                // "role_level"
  OPERATION_LOG_ENTRY_FREE_ZUANSHI = 8;              // "free_zuanshi"
  OPERATION_LOG_ENTRY_ZUANSHI = 9;                   // "zuanshi"
  OPERATION_LOG_ENTRY_REASON = 10;                   // "reason"
}

message OperationLogEntry
{
  optional OperationLogEntryType entry_type = 1;
  optional int64 int64_value = 2;
  optional uint64 uint64_value = 3;
  optional double double_value = 4;
  optional string string_value = 5;
}

message S2S_OperationLogRequest
{
  optional OperationLogType log_type = 1;
  optional uint32 zone_id = 2;                            // server
  optional uint64 timestamp = 3;                          // online_time
  repeated OperationLogEntry log_entries = 20;
}

//GM
message S2S_GMOpearteRequest
{
	optional bytes json_string = 1;
	optional int32 id = 2;
}

message S2S_GMOpearteResponse
{
	optional int32 error_code = 1;
	optional int32 id = 2;
	optional bytes data_string = 3;
}
